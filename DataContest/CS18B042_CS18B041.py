# -*- coding: utf-8 -*-
"""new_dc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Snw_C60lkFFvAFXkwZZUWxB790bFjtjC
"""

import matplotlib.pyplot as plt

import numpy as np

import csv

import pandas as pd

from xgboost import XGBRegressor

from sklearn.model_selection import train_test_split

from sklearn.metrics.pairwise import cosine_similarity

from sklearn.metrics import mean_squared_error

dummy_df = pd.read_csv("/content/dummy_submission.csv")
stol_df =  pd.read_csv("/content/save_for_later.csv")
slab_df =  pd.read_csv("/content/song_labels.csv")
song_df =  pd.read_csv("/content/songs.csv")
test_df =  pd.read_csv("/content/test.csv")
train_df =  pd.read_csv("/content/train.csv")

test_df.head()
a = (test_df["customer_id"])
b = (train_df["customer_id"])
c = pd.concat([a, b])
print (len(a)+len(b))
print( len(c))
cus = pd.unique(c)
print(len(cus))
print(len(pd.unique(a)))
cus_map = {}
for i in range(len(cus)):
  cus_map[cus[i]]=i
print (cus_map)

a = (test_df["song_id"])
b = (train_df["song_id"])
c = song_df["song_id"]
songs = pd.concat([a,b,c])
songs = pd.unique(songs)
print(len(songs))
print(len(pd.unique(c)))
song_map = {}
for i in range(len(songs)):
  song_map[songs[i]]=i
print(song_map)
print(len(song_map))
train_df.head()

at_score = np.zeros((len(cus),len(songs)))
exp_res = np.zeros(len(train_df.index))
for index,row in train_df.iterrows():
  a = cus_map[row["customer_id"]]
  b = song_map[row["song_id"]]
  exp_res[index]=row["score"]
  at_score[a,b]=row["score"]

def get_cos(mat):
  mat2 = mat.copy()
  mat2 = mat2.T
  a_arr = np.zeros(len(mat2))
  for i in range(len(mat2)):
    c = 0
    avg = 0
    for j in range(len(mat2[i])):
      if (mat2[i][j]!=0):
        c+=1
        avg+=mat2[i][j]
    avg/=c
    a_arr[i]=avg
    for j in range(len(mat2[i])):
      if (mat2[i][j]!=0):
        mat2[i][j]-=avg
  mat2=mat2.T
  x = cosine_similarity(mat2,mat2)
  for i in range(len(x)):
    x[i][i]=0
  return a_arr , x

s_avg , u_sim = get_cos(at_score)

u_avg , s_sim = get_cos(at_score.T)

print(np.sum(u_sim<0))
len(at_score)**2

print(np.sum(s_sim >=-0.1)-np.sum(s_sim >=-0.2))

# print(np.sum(s_sim<0))
# s_sim+=1
# s_sim[s_sim>1]*=10
s_sim[s_sim<0] = 0
# u_sim[u_sim<0] = 0

s_sim.shape

def o_s(df , sim):
  out = np.zeros(len(df))
  ss=0
  for index,row in df.iterrows():
    a = cus_map[row["customer_id"]]
    b = song_map[row["song_id"]]
    song_l = sim[b]
    mult = np.dot(song_l,at_score[a])
    k = at_score[a]
    s = np.sum(song_l[k>0])
    if (s==0):
      out[index] = u_avg[a]
      ss+=1
      continue
    out[index]=mult/s
  print(ss)
  return out

slab_df.head()

song_df.head()

lan_map={}
lan = pd.unique(song_df["language"])
print(len(lan))
for i in range(len(lan)):
  lan_map[lan[i]]=i+1

min(pd.unique(song_df["released_year"]))

max(pd.unique(song_df["released_year"]))

pid_map = {}
song_lan = np.zeros(len(songs));
song_rel = np.zeros(len(songs));
song_noc = np.zeros(len(songs));
for index , row in song_df.iterrows() :
  s = row["song_id"]
  ind = song_map[s]
  pid_map[row["platform_id"]] = ind
  song_lan[ind] = lan_map[row["language"]]
  song_rel[ind] = row["released_year"] + 1751.0
  song_noc[ind] = row["number_of_comments"]+1

max(song_rel)

max(song_noc)
min(song_noc[song_noc>0])

x = 27
for i in range(len(songs)):
  if song_lan[i]==0:
    song_lan[i]=x
    x+=1

lan_sim = np.zeros((len(songs),len(songs)))
rel_sim = np.zeros((len(songs),len(songs)))
com_sim = np.zeros((len(songs),len(songs)))
for i in range(len(songs)):
  for j in range(len(songs)):
    if i==j :
      continue
    if song_lan[i]==song_lan[j] :
      lan_sim[i][j]=1
    
    com_sim[i][j]= (3768.0 - (abs(song_noc[i]-song_noc[j])))**2
    if (song_noc[i] == 0 or song_noc[j]==0):
      com_sim[i][j]=0

    rel_sim[i][j]=(3768.0 - abs(song_rel[i]-song_rel[j]))**2
    if (song_rel[i] == 0 or song_rel[j]==0):
      rel_sim[i][j]=0

min(song_rel)

o_lan_tr = o_s(train_df,lan_sim)

o_rel_tr = o_s(train_df,rel_sim)

o_rel_tr

o_com_sim = o_s(train_df,com_sim)

o_lan = o_s(test_df,lan_sim)

o_rel = o_s(test_df,rel_sim)

o_com = o_s(test_df,com_sim)

o_nor_tr = o_s(train_df,s_sim)

o_nor = o_s(test_df,s_sim)

o_lan_tr

o = (3*o_lan + 1*o_com + 20*o_nor) / 24

dis = {"test_row_id":range(len(o)),'score':o}

df = pd.DataFrame(dis)
df.head()

df.to_csv('sub.csv',index=False)

